

module #(parameter N=16)adder(input logic [N-1:0] a, b, output logic [N-1:0] c, output logic neg, cout, zero);
   
	
	logic [N-2] b_neg, a_neg; 
	logic [N-1] a_op, b_op, c_op;
	
	a_op[N-1] = 0;
   b_op[N-1] = 0;
	a_op[N-2:0] = a[N-2:0];
	b_op[N-2:0] = b[N-2:0]; 	

	if (a[N-1] == b[N-1]) begin
		
		
		c_op[N-1:0] <= a[N-2:0] + b[N-2:0];
		neg <= a[N-1];
		c[N-1] <= a[N-1];
	
	end else if ((a[N-1] == 0) && (b[N-1] == 1)) begin
		
		if ((a_op > b_op)) begin
		
			neg <= 0;
			c[N-1] <= 0;
		
		end else begin
		
			neg <= 1;
		   c[N-1] <= 1;
		end
		
		b_neg = ~(b[N-2:0]) + 1;
		
		c[N-2:0] <= a[N-2:0] + b_neg;
	
	
	end else if ((a[N-1] == 1) && (b[N-1] == 0)) begin
		
		if ((a_op < b_op)) begin
		
			neg <= 0;
			c[N-1] <= 0;
		
		end else begin
		
			neg <= 1;
		   c[N-1] <= 1;
		end
		
		a_neg = ~(a[N-2:0]) + 1;
		
		c[N-2:0] <= b[N-2:0] + a_neg;
	
	
	end
	
	
	if ()



endmodule